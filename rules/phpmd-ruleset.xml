<?xml version="1.0"?>
<ruleset name="My first PHPMD rule set"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0
                     http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="
                     http://pmd.sf.net/ruleset_xml_schema.xsd">
    <description>
        Eggheads code style rule set
    </description>

    <rule ref="rulesets/unusedcode.xml"/>
    <rule ref="rulesets/design.xml">
        <exclude name="CouplingBetweenObjects"/>
    </rule>

    <rule ref="rulesets/naming.xml">
        <exclude name="LongClassName"/>
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
    </rule>

    <rule name="ShortVariable"
          since="0.2"
          message="Avoid variables with short names like {0}. Configured minimum length is {1}."
          class="PHPMD\Rule\Naming\ShortVariable"
          externalInfoUrl="https://phpmd.org/rules/naming.html#shortvariable">
        <description>
            Detects when a field, local, or parameter has a very short name.
        </description>
        <priority>3</priority>
        <properties>
            <property name="minimum" description="Minimum length for a variable, property or parameter name" value="2"/>
            <property name="exceptions" description="Comma-separated list of exceptions" value=""/>
        </properties>
        <example>
            <![CDATA[
class Something {
    private $q = 15; // VIOLATION - Field
    public static function main( array $as ) { // VIOLATION - Formal
        $r = 20 + $this->q; // VIOLATION - Local
        for (int $i = 0; $i < 10; $i++) { // Not a Violation (inside FOR)
            $r += $this->q;
        }
    }
}
            ]]>
        </example>
    </rule>

    <rule ref="rulesets/cleancode.xml">
        <exclude name="StaticAccess"/>
        <exclude name="ElseExpression"/>
        <exclude name="IfStatementAssignment"/>
    </rule>

    <rule name="FunctionRule"
          message="Static and dynamic methods mix in single class: {0}."
          file="../resources/MessDetector/DeprecateMethodMix.php"
          class="Resources\MessDetector\DeprecateMethodMix"
          externalInfoUrl="https://eggheads.solutions/phpmd/rules.html#functionrule">
        <priority>1</priority>
        <example>
            <![CDATA[
class Something {
    public static function main( array $as ) {
       ...
    }
    public function second() {
        ...
    }
}
            ]]>
        </example>
    </rule>
</ruleset>
